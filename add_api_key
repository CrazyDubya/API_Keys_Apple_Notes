#!/usr/bin/env bash
# add_api_key: Universal API Key Loader Script
#
# This script loads API keys (or any environment variable settings) into your current shell
# by extracting lines between <key_start> and </key_end> that begin with either "export" or "setx".
#
# On macOS/Linux (Unix-like systems), the script ensures that the commands are in export format,
# then evaluates them to update the current shell.
#
# On Windows (Git Bash/Cygwin/MSYS), the script converts commands to setx commands so that they
# update the registry for future sessions (note that setx does not affect the current session).
#
# The script retrieves note content either via AppleScript (macOS) or from a fallback plain-text file.
#
# You can override the defaults by setting these environment variables before sourcing:
#   NOTE_TITLE  - the title of your Apple Note (default: "API Keys")
#   NOTES_FILE  - the fallback plain-text file path (default: "$HOME/Notes.txt")
#
# IMPORTANT: To update your current shellâ€™s environment, you must source this script.
# Example alias:
#   alias add_api_key='source /usr/local/bin/add_api_key'

# Detect operating system
OS=$(uname)

# Default settings (can be overridden by preexporting these variables)
NOTE_TITLE=${NOTE_TITLE:-"API Keys"}
NOTES_FILE=${NOTES_FILE:-"$HOME/Notes.txt"}

echo "Retrieving note content for note titled: \"$NOTE_TITLE\"..."

# Retrieve note content:
if [[ "$OS" == "Darwin" ]]; then
    # macOS: Use AppleScript to fetch the note from Apple Notes.
    NOTE_CONTENT=$(osascript <<< "tell application \"Notes\"
    set theNote to first note whose name is \"$NOTE_TITLE\"
    return theNote's body
end tell")
else
    # For Linux/Other/Windows-like: if osascript exists, assume macOS-like behavior;
    # otherwise, fall back to reading a plain-text file.
    if command -v osascript >/dev/null 2>&1; then
        NOTE_CONTENT=$(osascript <<< "tell application \"Notes\"
        set theNote to first note whose name is \"$NOTE_TITLE\"
        return theNote's body
end tell")
    else
        if [ ! -f "$NOTES_FILE" ]; then
            echo "Error: Note file not found at $NOTES_FILE."
            echo "Please export your note to that location or set NOTES_FILE accordingly."
            return 1 2>/dev/null || exit 1
        fi
        NOTE_CONTENT=$(cat "$NOTES_FILE")
    fi
fi

if [ -z "$NOTE_CONTENT" ]; then
    echo "Error: No note content retrieved."
    return 1 2>/dev/null || exit 1
fi

# Remove HTML tags and decode HTML markers (if present)
cleaned=$(echo "$NOTE_CONTENT" | sed 's/<[^>]*>//g' | sed 's/&ltkey_start&gt/<key_start>/g; s/&lt\/key_end&gt/<\/key_end>/g')

echo "----- Cleaned Note Content -----"
echo "$cleaned"
echo "--------------------------------"

# Extract lines that begin with either "export" or "setx" (ignoring leading whitespace)
exports=$(echo "$cleaned" | awk '/<key_start>/{flag=1; next} /<\/key_end>/{flag=0} flag' | grep -E '^[[:space:]]*(export|setx)')

if [ -z "$exports" ]; then
    echo "No export or setx statements found between <key_start> and </key_end>."
    return 1 2>/dev/null || exit 1
fi

echo "Extracted environment-setting statements:"
echo "$exports"

# Conversion functions
convert_to_setx() {
  # Convert a line starting with "export" into a setx command.
  local line="$1"
  # Remove leading whitespace and "export"
  line=$(echo "$line" | sed -E 's/^[[:space:]]*export[[:space:]]+//')
  local var=$(echo "$line" | cut -d'=' -f1)
  local val=$(echo "$line" | cut -d'=' -f2-)
  val=$(echo "$val" | sed -E 's/^[[:space:]]+//;s/[[:space:]]+$//')
  echo "setx $var \"$val\""
}

convert_to_export() {
  # Convert a line starting with "setx" into an export command.
  local line="$1"
  # Remove leading whitespace and "setx"
  line=$(echo "$line" | sed -E 's/^[[:space:]]*setx[[:space:]]+//')
  local var=$(echo "$line" | awk '{print $1}')
  local val=$(echo "$line" | cut -d' ' -f2-)
  val=$(echo "$val" | sed -E 's/^"//; s/"$//')
  echo "export $var=$val"
}

# Build final command list in a variable
final_commands=""
while IFS= read -r line; do
    if [[ "$OS" == *"MINGW"* || "$OS" == *"CYGWIN"* || "$OS" == *"MSYS"* ]]; then
        # On Windows: ensure commands are in setx format.
        if [[ "$line" =~ ^[[:space:]]*export ]]; then
            conv=$(convert_to_setx "$line")
            final_commands="$final_commands
$conv"
        elif [[ "$line" =~ ^[[:space:]]*setx ]]; then
            final_commands="$final_commands
$line"
        fi
    else
        # On macOS/Linux: ensure commands are in export format.
        if [[ "$line" =~ ^[[:space:]]*setx ]]; then
            conv=$(convert_to_export "$line")
            final_commands="$final_commands
$conv"
        elif [[ "$line" =~ ^[[:space:]]*export ]]; then
            final_commands="$final_commands
$line"
        fi
    fi
done <<< "$exports"

echo "Final commands to be executed:"
echo "$final_commands"

# Prompt the user for confirmation
echo -n "Execute these environment-setting commands? [y/N] "
read confirm
if [[ "$confirm" != "y" && "$confirm" != "Y" ]]; then
    echo "Aborting execution."
    return 1 2>/dev/null || exit 1
fi

if [[ "$OS" == *"MINGW"* || "$OS" == *"CYGWIN"* || "$OS" == *"MSYS"* ]]; then
    echo "Executing setx commands (Note: changes apply to future sessions only):"
    # Execute each setx command
    while IFS= read -r cmd; do
        if [ -n "$cmd" ]; then
            echo "Running: $cmd"
            eval "$cmd"
        fi
    done <<< "$final_commands"
    echo "setx commands executed. Please open a new shell to use the updated environment variables."
else
    echo "Executing export commands..."
    eval "$final_commands"
    echo "Environment variables updated in current shell."
fi
